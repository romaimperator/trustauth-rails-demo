<div class="row">
  <div class="page-header">
    <h1>Server Setup Details</h1>
  </div>
  <div class="span12">
    <h2>Supported Web Frameworks</h2>
    <p>Currently there are plugins to add TrustAuth support for the following list:</p>
    <ul>
      <li>Ruby on Rails 3.0 via an Omniauth strategy available <%= link_to "here on github.com", "https://github.com/romaimperator/omniauth-trustauth" %>.</li>
    </ul>
    <p>The following list will soon be supported:</p>
    <ul>
      <li>CakePHP</li>
    </ul>
    <p class="trustauth-server-pad20">Feel free to add support for other frameworks. I will be happy to add links to plugins to the supported list.</p>
    <p>If your framework isn't currently supported or you are running custom PHP you can use the PHP script to add support for TrustAuth.</p>
    <ol class="linenums">
      <li>
        <p>Add a url in a meta tag to every page you want to allow the user to login on.  This meta tag just needs to have the name "trustauth" and a content of the url that the TrustAuth addons can authenticate with.</p>
        <p><code class="prettyprint">&lt;meta name="trustauth" content="your_authentication_handler_url"/&gt;</code></p>
      </li>
      <li>
        <p>Add the public key storage to your database.</p>
      </li>
      <li>
        <p>Add the server side authentication procedure to your website.</p>
        <p>Here is an example of the PHP script that will respond to the authentication handler url you put in the meta tag using the TrustAuth library:</p>
        <pre class="prettyprint linenums lang-html">
&lt;?php
include('trustauth.php');

// Start the session
session_start();

// Create the key to tell if this is the first part or the second part of authentication
if ( ! isset($_SESSION['authenticating']) ) {
    $_SESSION['authenticating'] = false;
}

// Check if the logged in session variable is set. If it's not initialize with false.
if ( ! isset($_SESSION['logged_in'])) {
    $_SESSION['logged_in'] = false;
}

if ( ! $_SESSION['authenticating']) {
    // This is the initial part of authentication
    $_SESSION['authenticating'] = true;

    // First thing to do is grab the user data out of the post variables.
    // NOTE: rawurldecode() is required because the key is urlencoded.
    $user = array(
        'public_key' => rawurldecode($_POST['public_key']),
        'random'     => $_POST['random'],
    );

    // Get the challenge to transmit to the server
    $result = TrustAuth::get_challenge($user);

    // Store the information required for the next part of authentication
    $_SESSION['server'] = $result['server'];
    $_SESSION['user']   = $user;

    // Return the result to the addon
    echo $result['json'];
}
else {
    // This is the second part of authentication

    // Load the stored information
    $user   = $_SESSION['user'];
    $server = $_SESSION['server'];

    // If these keys are not set then the addon and the server are out of sync so tell the addon to start over
    if ( ! isset($_POST['md5']) || ! isset($_POST['sha'])) {
        $result = TrustAuth::wrong_stage();
    }
    else {
        // Add the challenge response to the user information
        $user['md5'] = $_REQUEST['md5'];
        $user['sha'] = $_REQUEST['sha'];

        // Attempt to authenticate the data
        $result = TrustAuth::authenticate($user, $server, SUCCESS_URL, FAIL_URL);

        // $result['status'] is true if the authentication was successful
        if ($result['status']) {
            $_SESSION['logged_in'] = true;

            // Here if the public key is found then load the user_id otherwise create a new account
        }
    }
    // Reset to start authentication from the beginning again
    $_SESSION['authenticating'] = false;

    // Return the status of authentication to the addon
    echo $result['json'];
}
?&gt;
        </pre>
      </li>
    </ol>
  </div>
</div>
